package com.veterinarska.stanica.service;

import com.veterinarska.stanica.model.Korisnik;
import com.veterinarska.stanica.model.Poruka;
import com.veterinarska.stanica.repository.KorisnikRepository;
import com.veterinarska.stanica.repository.PorukaRepository;
import com.veterinarska.stanica.repository.PrijateljstvoRepository;
import org.springframework.stereotype.Service;

import java.util.List;

@Service
public class PorukaService {

    private final PorukaRepository porukaRepo;
    private final KorisnikRepository korisnikRepo;
    private final PrijateljstvoRepository prijateljstvoRepo;

    public PorukaService(PorukaRepository porukaRepo,
                         KorisnikRepository korisnikRepo,
                         PrijateljstvoRepository prijateljstvoRepo) {
        this.porukaRepo = porukaRepo;
        this.korisnikRepo = korisnikRepo;
        this.prijateljstvoRepo = prijateljstvoRepo;
    }

    /** Vlasnik može da šalje poruke samo prijateljima; ostale uloge – po starim pravilima (dozvoli). */
    public void posalji(Long posiljalacId, Long primalacId, String sadrzaj) {
        Korisnik posiljalac = korisnikRepo.findById(posiljalacId)
                .orElseThrow(() -> new IllegalArgumentException("Pošiljalac ne postoji"));
        Korisnik primalac = korisnikRepo.findById(primalacId)
                .orElseThrow(() -> new IllegalArgumentException("Primalac ne postoji"));

        // pravilo za VLASNIK-a
        String uloga = posiljalac.getUloga().name(); // prilagodi ako nije enum/name()
        if ("VLASNIK".equalsIgnoreCase(uloga)) {
            boolean prijatelji = prijateljstvoRepo.jesuPrijatelji(posiljalac.getId(), primalac.getId());
            if (!prijatelji) {
                throw new IllegalStateException("Vlasnici mogu slati poruke samo prijateljima.");
            }
        }

        Poruka p = new Poruka();
        p.setPosiljalac(posiljalac);
        p.setPrimalac(primalac);
        p.setSadrzaj(sadrzaj);
        porukaRepo.save(p);
    }

    public List<Poruka> konverzacija(Long aId, Long bId) {
        Korisnik a = korisnikRepo.findById(aId)
                .orElseThrow(() -> new IllegalArgumentException("Korisnik A ne postoji"));
        Korisnik b = korisnikRepo.findById(bId)
                .orElseThrow(() -> new IllegalArgumentException("Korisnik B ne postoji"));
        return porukaRepo.konverzacija(a, b);
    }
}

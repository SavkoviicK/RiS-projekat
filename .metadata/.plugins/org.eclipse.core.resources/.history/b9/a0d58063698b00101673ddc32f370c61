package com.veterinarska.stanica.controller;

import com.veterinarska.stanica.dto.MedicinskiZapisDTO;
import com.veterinarska.stanica.mapper.AppMapper;
import com.veterinarska.stanica.model.Korisnik;
import com.veterinarska.stanica.model.Ljubimac;
import com.veterinarska.stanica.model.MedicinskiZapis;
import com.veterinarska.stanica.model.Pregled;
import com.veterinarska.stanica.model.Uloga;
import com.veterinarska.stanica.repository.KorisnikRepository;
import com.veterinarska.stanica.repository.LjubimacRepository;
import com.veterinarska.stanica.repository.MedicinskiZapisRepository;
import com.veterinarska.stanica.repository.PregledRepository;
import org.springframework.http.ResponseEntity;
import org.springframework.security.core.Authentication;
import org.springframework.web.bind.annotation.*;

import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Objects;
import java.util.HashMap;
import java.util.stream.Collectors;

import static com.veterinarska.stanica.mapper.AppMapper.toDTO;

@RestController
@RequestMapping({
        "/api/medicinski-zapisi",
        "/api/medicinski-zapis",
        "/api/medicinskiZapis",
        "/api/medicinskiZapisi"
})
public class MedicinskiZapisController {

    private final MedicinskiZapisRepository zapisRepo;
    private final LjubimacRepository ljubimacRepo;
    private final KorisnikRepository korisnikRepo;
    private final PregledRepository pregledRepo;

    public MedicinskiZapisController(MedicinskiZapisRepository zapisRepo,
                                     LjubimacRepository ljubimacRepo,
                                     KorisnikRepository korisnikRepo,
                                     PregledRepository pregledRepo) {
        this.zapisRepo = zapisRepo;
        this.ljubimacRepo = ljubimacRepo;
        this.korisnikRepo = korisnikRepo;
        this.pregledRepo = pregledRepo;
    }

    // ---------- POMOĆNI DTO KLASA ZA LISTU ----------
    public static class EligibleItem {
        private Long pregledId;
        private String ljubimacIme;
        private String vlasnik;
        private String terminOpis;
        public EligibleItem() {}
        public EligibleItem(Long pregledId, String ljubimacIme, String vlasnik, String terminOpis) {
            this.pregledId = pregledId;
            this.ljubimacIme = ljubimacIme;
            this.vlasnik = vlasnik;
            this.terminOpis = terminOpis;
        }
        public Long getPregledId() { return pregledId; }
        public String getLjubimacIme() { return ljubimacIme; }
        public String getVlasnik() { return vlasnik; }
        public String getTerminOpis() { return terminOpis; }
        public void setPregledId(Long pregledId) { this.pregledId = pregledId; }
        public void setLjubimacIme(String ljubimacIme) { this.ljubimacIme = ljubimacIme; }
        public void setVlasnik(String vlasnik) { this.vlasnik = vlasnik; }
        public void setTerminOpis(String terminOpis) { this.terminOpis = terminOpis; }
    }

    // ---------- POMOĆNI DTO KLASA ZA KREIRANJE ----------
    public static class CreateRequest {
        private Long pregledId;
        private String ljubimacIme; // fallback ako UI baš ne šalje ID
        private String dijagnoza;
        private String terapija;
        public Long getPregledId() { return pregledId; }
        public void setPregledId(Long pregledId) { this.pregledId = pregledId; }
        public String getLjubimacIme() { return ljubimacIme; }
        public void setLjubimacIme(String ljubimacIme) { this.ljubimacIme = ljubimacIme; }
        public String getDijagnoza() { return dijagnoza; }
        public void setDijagnoza(String dijagnoza) { this.dijagnoza = dijagnoza; }
        public String getTerapija() { return terapija; }
        public void setTerapija(String terapija) { this.terapija = terapija; }
    }

    // ---------- LISTANJE POSTOJEĆIH ZAPISA ----------
    @GetMapping({"", "/"})
    public ResponseEntity<List<MedicinskiZapisDTO>> svi() {
        List<MedicinskiZapisDTO> out = zapisRepo.findAll()
                .stream()
                .map(AppMapper::toDTO)
                .collect(Collectors.toList());
        return ResponseEntity.ok(out);
    }

    // ---------- LISTA LJUBIMACA ZA IZVEŠTAJ (samo OBAVLJENI pregledi kod prijavljenog veta) ----------
    @GetMapping("/moji-ljubimci-za-izvestaj")
    public ResponseEntity<?> mojiLjubimciZaIzvestaj(Authentication auth) {
        Korisnik vet = ulogovanVeterinar(auth);
        if (vet == null) return ResponseEntity.status(401).body(singleMsg("Niste prijavljeni."));
        if (vet.getUloga() != Uloga.VETERINAR)
            return ResponseEntity.status(403).body(singleMsg("Samo veterinar može unositi medicinske zapise."));

        List<Pregled> pregledi = pregledRepo.findByVeterinarId(vet.getId());
        DateTimeFormatter fmt = DateTimeFormatter.ofPattern("dd.MM.yyyy. HH:mm");
        List<EligibleItem> out = new ArrayList<EligibleItem>();

        for (Pregled p : pregledi) {
            if (jeZavrsen(p)) {
                Ljubimac lj = p.getLjubimac();
                String vlasnik = (lj != null && lj.getVlasnik() != null)
                        ? (safe(lj.getVlasnik().getIme()) + " " + safe(lj.getVlasnik().getPrezime())).trim()
                        : "";
                String termin = p.getTermin() != null ? fmt.format(p.getTermin()) : "";
                out.add(new EligibleItem(p.getId(), lj != null ? lj.getIme() : "", vlasnik, termin));
            }
        }
        // sort opadajuće po terminu (string), samo radi lepšeg prikaza
        out.sort(new Comparator<EligibleItem>() {
            @Override public int compare(EligibleItem a, EligibleItem b) {
                String sa = a.getTerminOpis() == null ? "" : a.getTerminOpis();
                String sb = b.getTerminOpis() == null ? "" : b.getTerminOpis();
                return -sa.compareTo(sb);
            }
        });
        return ResponseEntity.ok(out);
    }

    // ---------- KREIRANJE ZAPISA ----------
    @PostMapping({"", "/", "/dodaj", "/save"})
    public ResponseEntity<?> dodaj(@RequestBody CreateRequest body, Authentication auth) {
        Korisnik vet = ulogovanVeterinar(auth);
        if (vet == null) return ResponseEntity.status(401).body(singleMsg("Niste prijavljeni."));
        if (vet.getUloga() != Uloga.VETERINAR)
            return ResponseEntity.status(403).body(singleMsg("Samo veterinar može unositi medicinske zapise."));

        if (body == null || empty(body.getDijagnoza())) {
            return ResponseEntity.badRequest().body(singleMsg("Dijagnoza je obavezna."));
        }

        Pregled pregled = null;

        // 1) Preporučeno: stiže pregledId iz padajuće liste (UI ne mora da prikazuje ID korisniku)
        if (body.getPregledId() != null) {
            pregled = pregledRepo.findById(body.getPregledId()).orElse(null);
            if (pregled == null) return ResponseEntity.status(404).body(singleMsg("Pregled ne postoji."));
            if (pregled.getVeterinar() == null || !Objects.equals(pregled.getVeterinar().getId(), vet.getId()))
                return ResponseEntity.status(403).body(singleMsg("Pregled nije dodeljen prijavljenom veterinaru."));
            if (!jeZavrsen(pregled))
                return ResponseEntity.status(400).body(singleMsg("Izveštaj se može uneti samo za OBAVLJEN pregled."));
        }
        // 2) Fallback: ako baš šalješ samo ime ljubimca
        else if (!empty(body.getLjubimacIme())) {
            List<Pregled> pregledi = pregledRepo.findByVeterinarId(vet.getId());
            // najskoriji obavljeni
            java.util.Comparator<Pregled> byTermin =
                    new java.util.Comparator<Pregled>() {
                        @Override public int compare(Pregled a, Pregled b) {
                            if (a.getTermin() == null && b.getTermin() == null) return 0;
                            if (a.getTermin() == null) return 1;
                            if (b.getTermin() == null) return -1;
                            return b.getTermin().compareTo(a.getTermin()); // opadajuće
                        }
                    };
            java.util.Collections.sort(pregledi, byTermin);

            for (Pregled p : pregledi) {
                Ljubimac lj = p.getLjubimac();
                if (jeZavrsen(p) && lj != null && body.getLjubimacIme().equalsIgnoreCase(lj.getIme())) {
                    pregled = p; break;
                }
            }
            if (pregled == null)
                return ResponseEntity.status(404).body(singleMsg("Nije pronađen OBAVLJEN pregled za tog ljubimca kod prijavljenog veterinara."));
        } else {
            return ResponseEntity.badRequest().body(singleMsg("Odaberite pregled ili ljubimca iz liste."));
        }

        // Kreiraj i sačuvaj zapis
        Ljubimac ljubimac = pregled.getLjubimac();
        MedicinskiZapis zapis = new MedicinskiZapis();
        zapis.setLjubimac(ljubimac);
        zapis.setVeterinar(vet);
        zapis.setDijagnoza(body.getDijagnoza().trim());
        zapis.setTerapija(empty(body.getTerapija()) ? null : body.getTerapija().trim());

        MedicinskiZapis sacuvan = zapisRepo.save(zapis);
        return ResponseEntity.status(201).body(toDTO(sacuvan));
    }

    // ---------- pomoćne ----------
    private Korisnik ulogovanVeterinar(Authentication auth) {
        if (auth == null || auth.getName() == null) return null;
        return korisnikRepo.findByEmail(auth.getName()).orElse(null);
    }
    private static boolean empty(String s){ return s == null || s.isBlank(); }
    private static String safe(String s){ return s == null ? "" : s; }

    // Prihvatamo OBAVLJEN/ZAVRSEN/ZAVRŠEN
    private static boolean jeZavrsen(Pregled p){
        if (p == null || p.getStatus() == null) return false;
        String s = p.getStatus().toString().toUpperCase(Locale.ROOT);
        return s.equals("OBAVLJEN") || s.equals("ZAVRSEN") || s.equals("ZAVRŠEN");
    }

    private static Map<String,String> singleMsg(String msg) {
        Map<String,String> m = new HashMap<String,String>();
        m.put("message", msg);
        return m;
    }
}

<%@ page contentType="text/html; charset=UTF-8" isELIgnored="true" %>
<!DOCTYPE html>
<html lang="sr">
<head>
  <meta charset="UTF-8">
  <title>Prijatelji</title>
  <style>
    body { font-family: Arial, sans-serif; margin:0; background:#f7f9fb; }
    .wrap { max-width: 900px; margin: 24px auto; padding: 0 16px; }
    table { width: 100%; border-collapse: collapse; background:#fff; border:1px solid #e6e6e6; }
    th, td { padding: 10px; border-top: 1px solid #eee; text-align: left; }
    thead tr { background: #f2f4f7; }
    h1 { margin: 0 0 12px 0; }
    h2 { margin: 24px 0 10px; }
    .row { display:flex; gap:10px; align-items:center; flex-wrap:wrap; }
    select { padding:8px; border:1px solid #ccc; border-radius:6px; min-width:260px; }
    .btn { padding: 6px 12px; border: none; border-radius: 6px; cursor: pointer; }
    .btn-accept { background: #4CAF50; color: #fff; }
    .btn-decline { background: #f44336; color: #fff; }
    .btn-send { background: #0b5ed7; color:#fff; }
    .muted { color:#666; font-size:.92em; }
    .note { margin:6px 0 14px; }
    .warn { color:#b33; font-weight:600; }
  </style>
  <script defer src="/js/auth.js"></script>
</head>
<body>
<div class="wrap">
  <h1>üë• Prijatelji</h1>

  <div class="note muted">
    Poruke mo≈æete slati <strong>samo korisnicima</strong> sa kojima ste <strong>prijatelji</strong>.
  </div>

  <form class="row" id="frmZahtev" onsubmit="return posaljiZahtev(event)">
    <label><strong>Po≈°alji zahtev korisniku:</strong></label>
    <select id="selKorisnik" required>
      <option value="">‚Äî izaberi korisnika ‚Äî</option>
    </select>
    <button class="btn btn-send" type="submit">Po≈°alji zahtev</button>
    <span id="msgZahtev" class="muted"></span>
  </form>

  <h2>Zahtevi za prijateljstvo</h2>
  <table>
    <thead>
      <tr><th>Od</th><th>Akcija</th></tr>
    </thead>
    <tbody id="tbodyZahtevi">
      <tr><td colspan="2" class="muted">Uƒçitavam‚Ä¶</td></tr>
    </tbody>
  </table>

  <h2>Moji prijatelji</h2>
  <table>
    <thead>
      <tr><th>Ime i prezime</th><th>Email</th><th>Poruke</th></tr>
    </thead>
    <tbody id="tbodyPrijatelji">
      <tr><td colspan="3" class="muted">Uƒçitavam‚Ä¶</td></tr>
    </tbody>
  </table>
</div>

<script>
// --- Helpers ---
function authHeader(){ const t=localStorage.getItem('jwt'); return t?{'Authorization':'Bearer '+t}:{ }; }
async function whoAmI(){
  try{
    const res = await fetch('/api/whoami', { headers: authHeader() });
    if(!res.ok) return { id:null, email:null };
    const me = await res.json();
    return {
      id: me.id ?? me.userId ?? me.korisnikId ?? me.vlasnikId ?? me.veterinarId ?? null,
      email: me.email ?? me.username ?? me.korisnikEmail ?? null
    };
  }catch(_){ return { id:null, email:null }; }
}
function clean(v){ const s=String(v??'').trim(); return (!s || ['null','undefined','false'].includes(s.toLowerCase()))?'':s; }
function fullName(u){ const a=clean(u.ime), b=clean(u.prezime); return (a&&b)?(a+' '+b):(a||b); }
function uniqPush(arr, keySet, item, key){ if(keySet.has(key)) return; keySet.add(key); arr.push(item); }

// --- Slanje zahteva ---
async function posaljiZahtev(ev){
  ev.preventDefault();
  const sel = document.getElementById('selKorisnik');
  const msg = document.getElementById('msgZahtev');
  const id  = sel.value;
  if(!id){ msg.textContent='Izaberi korisnika.'; return false; }
  msg.textContent='≈†aljem‚Ä¶';
  try{
    const res = await fetch('/api/prijatelji/zahtev?primaocId='+encodeURIComponent(id),
                            { method:'POST', headers: authHeader() });
    const txt = await res.text();
    if(!res.ok) throw new Error(txt||('HTTP '+res.status));
    msg.textContent='Poslato ‚úÖ';
    await ucitajSve();
    await popuniKorisnike();
  }catch(e){
    msg.innerHTML = '<span class="warn">Gre≈°ka:</span> '+(e.message||'');
  }
  return false;
}

// --- Uƒçitavanje zahteva (pristigli) ---
async function ucitajZahteve(){
  const tbody = document.getElementById('tbodyZahtevi');
  try{
    const res = await fetch('/api/prijatelji/na-cekaju', { headers: authHeader() });
    if(!res.ok) throw new Error(await res.text());
    const list = await res.json();

    tbody.innerHTML='';
    if(!Array.isArray(list)||list.length===0){
      tbody.innerHTML='<tr><td colspan="2">Nema novih zahteva</td></tr>';
      return;
    }
    for (const z of list) {
      const p = z.posiljalac || {};
      const label = (fullName(p) || 'Korisnik') + (p.email?(' ('+p.email+')'):'');
      const idTxt = (p.id!=null) ? String(p.id) : '?';

      const tr = document.createElement('tr');
      tr.innerHTML = `
        <td>${label || ('Korisnik #'+ idTxt)}</td>
        <td>
          <button class="btn btn-accept" onclick="return prihvatiOdbij(${z.id}, true)">Prihvati</button>
          <button class="btn btn-decline" onclick="return prihvatiOdbij(${z.id}, false)">Odbij</button>
        </td>`;
      tbody.appendChild(tr);
    }

  }catch(e){
    tbody.innerHTML='<tr><td colspan="2" class="muted">Gre≈°ka pri uƒçitavanju: '+(e.message||'')+'</td></tr>';
  }
}

async function prihvatiOdbij(zahtevId, prihvati){
  try{
    const res = await fetch(`/api/prijatelji/odgovor?zahtevId=${zahtevId}&prihvati=${prihvati}`, {
      method: 'POST',
      headers: authHeader()
    });
    const text = await res.text();
    if(!res.ok){
      alert('Gre≈°ka ('+res.status+'): ' + text);
      return false;
    }
    alert(text || 'Zahtev je a≈æuriran.');
    await ucitajSve();
    await popuniKorisnike();
  }catch(e){
    alert('Gre≈°ka (JS): ' + (e.message||''));
  }
  return false;
}

// --- Uƒçitavanje prijatelja (ime + prezime) ---
async function ucitajPrijatelje(){
  const tbody = document.getElementById('tbodyPrijatelji');
  try{
    const res = await fetch('/api/prijatelji', { headers: authHeader() });
    if(!res.ok) throw new Error(await res.text());
    const list = await res.json();

    tbody.innerHTML='';
    if(!Array.isArray(list)||list.length===0){
      tbody.innerHTML='<tr><td colspan="3">Jo≈° nema≈° prijatelja</td></tr>';
      return;
    }
    for(const f of list){
      const full = fullName(f);
      const email = clean(f.email);
      const tr = document.createElement('tr');
      tr.innerHTML = `
        <td>${full||'-'}</td>
        <td>${email||'-'}</td>
        <td><a class="btn btn-send" href="/poruke">Otvori chat</a></td>`;
      tbody.appendChild(tr);
    }
  }catch(e){
    tbody.innerHTML='<tr><td colspan="3" class="muted">Gre≈°ka pri uƒçitavanju: '+(e.message||'')+'</td></tr>';
  }
}

// --- Dropdown korisnika koji NISU prijatelji/pending/ja (sve uloge) ---
async function popuniKorisnike(){
  const sel = document.getElementById('selKorisnik');
  if(!sel) return;

  const me = await whoAmI();

  // 1) Prijatelji i pristigli zahtevi (pending)
  const [prijRes, pendRes] = await Promise.all([
    fetch('/api/prijatelji', { headers: authHeader() }),
    fetch('/api/prijatelji/na-cekaju', { headers: authHeader() })
  ]);

  const prijatelji = prijRes.ok ? await prijRes.json() : [];
  const pendinzi   = pendRes.ok ? await pendRes.json() : [];

  const prijateljIds = new Set((Array.isArray(prijatelji)?prijatelji:[]).map(f => f.id));
  const pendingSenders = new Set((Array.isArray(pendinzi)?pendinzi:[]).map(z => z.posiljalac && z.posiljalac.id).filter(Boolean));

  // Poku≈°aj da pokupi≈° i moje poslate zahteve (ako API postoji); fallback je prazan
  let pendingRecipients = new Set();
  try{
    const resOut = await fetch('/api/prijatelji/moji-zahtevi', { headers: authHeader() });
    if(resOut.ok){
      const lst = await resOut.json();
      pendingRecipients = new Set((Array.isArray(lst)?lst:[]).map(z => z.primaoc && z.primaoc.id).filter(Boolean));
    }
  }catch(_){ /* ignore */ }

  // 2) Svi korisnici (skupljamo iz tri rola endpointa jer univerzalni mo≈æda ne postoji)
  const seen = new Set();
  const svi = [];

  async function safeFetchUsers(url){
    try{
      const r = await fetch(url, { headers: authHeader() });
      if(!r.ok) return [];
      const data = await r.json();
      return Array.isArray(data)?data:[];
    }catch(_){ return []; }
  }

  const [admins, vets, owners] = await Promise.all([
    safeFetchUsers('/api/korisnici?rola=ADMIN'),
    safeFetchUsers('/api/korisnici?rola=VETERINAR'),
    safeFetchUsers('/api/korisnici?rola=VLASNIK'),
  ]);

  [...admins, ...vets, ...owners].forEach(u=>{
    const id = u.id ?? u.userId ?? u.korisnikId ?? u.vlasnikId ?? u.veterinarId;
    if(!id) return;
    if(seen.has(id)) return;
    seen.add(id);
    svi.push({
      id,
      ime: clean(u.ime || u.firstName || ''),
      prezime: clean(u.prezime || u.lastName || ''),
      email: clean(u.email || u.username || u.korisnikEmail || u.mail || ''),
    });
  });

  // 3) Filtriranje: ne ja, ne prijatelj, ne pending (ni kao po≈°iljalac ka meni, ni kao primaoc od mene)
  const kandidati = svi.filter(u =>
    u.id &&
    !(me.id && u.id === me.id) &&
    !(me.email && u.email && u.email.toLowerCase() === String(me.email).toLowerCase()) &&
    !prijateljIds.has(u.id) &&
    !pendingSenders.has(u.id) &&
    !pendingRecipients.has(u.id)
  ).sort((a,b)=> (fullName(a) || a.email).localeCompare(fullName(b) || b.email));

  // 4) Popuni select
  sel.innerHTML = '<option value="">‚Äî izaberi korisnika ‚Äî</option>';
  if(!kandidati.length){
    const opt = document.createElement('option');
    opt.value=''; opt.textContent='Nema dostupnih (svi su veƒá prijatelji ili pending)';
    sel.appendChild(opt);
    sel.disabled=true;
    return;
  }
  sel.disabled=false;
  for(const k of kandidati){
    const fn = fullName(k);
    const label = (fn ? (fn+' ‚Äì ') : '') + (k.email||('Korisnik #'+k.id)) + ' (#'+k.id+')';
    const opt = document.createElement('option');
    opt.value = String(k.id);
    opt.textContent = label;
    sel.appendChild(opt);
  }
}

// --- Orkestracija ---
async function ucitajSve(){ await Promise.all([ ucitajZahteve(), ucitajPrijatelje() ]); }

window.addEventListener('load', async ()=>{
  if(!localStorage.getItem('jwt')){
    document.getElementById('tbodyZahtevi').innerHTML='<tr><td colspan="2">Prijavite se.</td></tr>';
    document.getElementById('tbodyPrijatelji').innerHTML='<tr><td colspan="3">Prijavite se.</td></tr>';
    return;
  }
  await ucitajSve();
  await popuniKorisnike();
});
</script>
</body>
</html>

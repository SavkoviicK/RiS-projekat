package com.veterinarska.stanica.service;

import com.veterinarska.stanica.model.FriendRequest;
import com.veterinarska.stanica.model.Friendship;
import com.veterinarska.stanica.model.Korisnik;
import com.veterinarska.stanica.repository.FriendRequestRepository;
import com.veterinarska.stanica.repository.FriendshipRepository;
import com.veterinarska.stanica.repository.KorisnikRepository;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.util.List;

@Service
public class FriendRequestService {

    private final FriendRequestRepository friendRequestRepo;
    private final FriendshipRepository friendshipRepo;
    private final KorisnikRepository korisnikRepo;

    public FriendRequestService(FriendRequestRepository friendRequestRepo,
                                FriendshipRepository friendshipRepo,
                                KorisnikRepository korisnikRepo) {
        this.friendRequestRepo = friendRequestRepo;
        this.friendshipRepo = friendshipRepo;
        this.korisnikRepo = korisnikRepo;
    }

    @Transactional
    public void sendFriendRequest(Long senderId, Long receiverId) {
        if (senderId.equals(receiverId)) {
            throw new IllegalArgumentException("Ne možeš poslati zahtev samom sebi.");
        }

        Korisnik sender = korisnikRepo.findById(senderId)
                .orElseThrow(() -> new IllegalArgumentException("Pošiljalac ne postoji"));
        Korisnik receiver = korisnikRepo.findById(receiverId)
                .orElseThrow(() -> new IllegalArgumentException("Primalac ne postoji"));

        // Ako su već prijatelji → nema potrebe
        if (friendshipRepo.areFriends(senderId, receiverId)) {
            throw new IllegalStateException("Već ste prijatelji.");
        }

        // Ako već postoji pending zahtev
        if (friendRequestRepo.existsByFromUserAndToUserAndStatus(sender, receiver, FriendRequest.Status.PENDING)) {
            throw new IllegalStateException("Zahtev već postoji i čeka.");
        }

        FriendRequest req = new FriendRequest();
        req.setFromUser(sender);
        req.setToUser(receiver);
        req.setStatus(FriendRequest.Status.PENDING);
        friendRequestRepo.save(req);
    }

    @Transactional
    public void respondToFriendRequest(Long requestId, boolean accepted) {
        FriendRequest req = friendRequestRepo.findById(requestId)
                .orElseThrow(() -> new IllegalArgumentException("Zahtev nije pronađen."));

        if (accepted) {
            req.setStatus(FriendRequest.Status.ACCEPTED);

            // kreiraj prijateljstvo
            Friendship friendship = new Friendship();
            friendship.setUser1(req.getFromUser());
            friendship.setUser2(req.getToUser());
            friendshipRepo.save(friendship);
        } else {
            req.setStatus(FriendRequest.Status.DECLINED);
        }

        friendRequestRepo.save(req);
    }

    public List<FriendRequest> getPendingRequests(Long userId) {
        Korisnik korisnik = korisnikRepo.findById(userId)
                .orElseThrow(() -> new IllegalArgumentException("Korisnik ne postoji"));
        return friendRequestRepo.findByToUserAndStatus(korisnik, FriendRequest.Status.PENDING);
    }

    public List<Korisnik> getFriends(Long userId) {
        return friendshipRepo.listFriends(userId);
    }
}

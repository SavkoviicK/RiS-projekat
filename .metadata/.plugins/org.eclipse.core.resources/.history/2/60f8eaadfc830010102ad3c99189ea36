package com.veterinarska.stanica.config;

import com.veterinarska.stanica.security.JwtAuthFilter;
import com.veterinarska.stanica.security.JwtUtil;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.config.http.SessionCreationPolicy;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.web.SecurityFilterChain;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;


@Configuration
public class SecurityConfig {
	
	@Value("${jwt.secret}") private String jwtSecret;
	@Value("${jwt.expiration}") private long jwtExpiration;

	@Bean
	public JwtUtil jwtUtil() {
	    return new JwtUtil(jwtSecret, jwtExpiration);
	}


    @Bean
    public SecurityFilterChain filterChain(HttpSecurity http) throws Exception {
        http.csrf(csrf -> csrf.disable())
            .authorizeHttpRequests(auth -> auth
                .requestMatchers("/api/ping").permitAll()   // ovo puÅ¡tamo bez logina
                .requestMatchers("/api/korisnici/registracija").permitAll()
                .requestMatchers("/api/ljubimci/**").permitAll()
                .requestMatchers("/api/usluge/**").permitAll()
                .requestMatchers("/api/pregledi/**").permitAll()
                .requestMatchers("/api/medicinski-zapisi/**").permitAll()
                .requestMatchers("/api/poruke/**").permitAll()
                .requestMatchers("/api/auth/**").permitAll()
                .anyRequest().permitAll()
            )
            .httpBasic(customer -> {});
        return http.build();
    }

//	@Bean
//	public SecurityFilterChain filterChain(HttpSecurity http) throws Exception {
//	    http.csrf(csrf -> csrf.disable())
//	        .authorizeHttpRequests(auth -> auth
//	            .anyRequest().permitAll()   // sve je javno dozvoljeno
//	        );
//	    return http.build();
//	}

    @Bean
    public PasswordEncoder passwordEncoder() {
        return new BCryptPasswordEncoder();
    }
}

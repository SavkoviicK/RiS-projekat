package com.veterinarska.stanica.controller;

import com.veterinarska.stanica.dto.LjubimacDTO;
import com.veterinarska.stanica.mapper.AppMapper;
import com.veterinarska.stanica.model.Ljubimac;
import com.veterinarska.stanica.repository.KorisnikRepository;
import com.veterinarska.stanica.repository.LjubimacRepository;
import jakarta.validation.Valid;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.*;
import org.springframework.security.core.context.SecurityContextHolder;
import java.util.List;

import static com.veterinarska.stanica.mapper.AppMapper.toDTO;


@RestController
@RequestMapping("/api/ljubimci")
public class LjubimacController {

    private final LjubimacRepository repo;
    private final KorisnikRepository korisnikRepo;

    public LjubimacController(LjubimacRepository repo, KorisnikRepository korisnikRepo) {
        this.repo = repo;
        this.korisnikRepo = korisnikRepo;
    }

    // CREATE
    
 // POST /api/ljubimci
    @PostMapping
    public ResponseEntity<LjubimacDTO> dodaj(@Valid @RequestBody Ljubimac l, BindingResult result) {
        if (result.hasErrors()) return ResponseEntity.badRequest().build();

        // 1) uzmi email iz JWT (subject)
        String email = SecurityContextHolder.getContext().getAuthentication().getName();

        // 2) ucitaj vlasnika iz baze
        var vlasnik = korisnikRepo.findByEmail(email)
                .orElseThrow(() -> new RuntimeException("Vlasnik nije pronađen: " + email));

        // 3) vezi vlasnika i sacuvaj
        l.setVlasnik(vlasnik);
        var sacuvan = repo.save(l);

        return ResponseEntity.ok(AppMapper.toDTO(sacuvan));
    }
	
    @GetMapping
    public List<LjubimacDTO> moji() {

    	String email = SecurityContextHolder.getContext().getAuthentication().getName();

        var vlasnik = korisnikRepo.findByEmail(email)
                .orElseThrow(() -> new RuntimeException("Korisnik nije pronađen: " + email));

        return repo.findByVlasnikId(vlasnik.getId())
                   .stream()
                   .map(AppMapper::toDTO)
                   .toList();
    }
    
    // UPDATE
    @PutMapping("/{id}")
    public ResponseEntity<?> izmeni(@PathVariable Long id,
                                    @Valid @RequestBody Ljubimac l,
                                    BindingResult result) {
        if (result.hasErrors()) {
            return ResponseEntity.badRequest().body(result.getAllErrors());
        }
        return repo.findById(id)
                .map(postojeci -> {
                    postojeci.setIme(l.getIme());
                    postojeci.setVrsta(l.getVrsta());
                    postojeci.setRasa(l.getRasa());
                    postojeci.setPol(l.getPol());
                    postojeci.setNapomena(l.getNapomena());
                    var sacuvan = repo.save(postojeci);
                    return ResponseEntity.ok(toDTO(sacuvan));
                })
                .orElseGet(() -> ResponseEntity.notFound().build());
    }

    // DELETE
    @DeleteMapping("/{id}")
    public ResponseEntity<?> obrisi(@PathVariable Long id) {
        if (!repo.existsById(id)) {
            return ResponseEntity.notFound().build();
        }
        repo.deleteById(id);
        return ResponseEntity.noContent().build();
    }
}

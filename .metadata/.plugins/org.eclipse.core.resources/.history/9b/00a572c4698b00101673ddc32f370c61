package com.veterinarska.stanica.controller;

import com.veterinarska.stanica.dto.MedicinskiZapisDTO;
import com.veterinarska.stanica.mapper.AppMapper;
import com.veterinarska.stanica.model.Korisnik;
import com.veterinarska.stanica.model.Ljubimac;
import com.veterinarska.stanica.model.MedicinskiZapis;
import com.veterinarska.stanica.model.Uloga;
import com.veterinarska.stanica.repository.KorisnikRepository;
import com.veterinarska.stanica.repository.LjubimacRepository;
import com.veterinarska.stanica.repository.MedicinskiZapisRepository;
import org.springframework.http.ResponseEntity;
import org.springframework.security.core.Authentication;
import org.springframework.web.bind.annotation.*;

import java.util.List;
import java.util.Map;

import static com.veterinarska.stanica.mapper.AppMapper.toDTO;

@RestController
@RequestMapping("/api/medicinski-zapisi")
public class MedicinskiZapisController {

    private final MedicinskiZapisRepository repo;
    private final LjubimacRepository ljubimacRepo;
    private final KorisnikRepository korisnikRepo;

    public MedicinskiZapisController(MedicinskiZapisRepository repo,
                                     LjubimacRepository ljubimacRepo,
                                     KorisnikRepository korisnikRepo) {
        this.repo = repo;
        this.ljubimacRepo = ljubimacRepo;
        this.korisnikRepo = korisnikRepo;
    }

    @GetMapping
    public ResponseEntity<List<MedicinskiZapisDTO>> svi() {
        var out = repo.findAll().stream().map(AppMapper::toDTO).toList();
        return ResponseEntity.ok(out);
    }

    @PostMapping
    public ResponseEntity<?> dodaj(@RequestBody MedicinskiZapisDTO body,
                                   Authentication auth) {
        // 0) Provera login-a
        if (auth == null || auth.getName() == null) {
            return ResponseEntity.status(401).body(Map.of("message", "Niste prijavljeni."));
        }
        var korisnikOpt = korisnikRepo.findByEmail(auth.getName());
        if (korisnikOpt.isEmpty()) {
            return ResponseEntity.status(401).body(Map.of("message", "Korisnik nije pronađen."));
        }
        Korisnik veterinar = korisnikOpt.get();
        if (veterinar.getUloga() != Uloga.VETERINAR) {
            return ResponseEntity.status(403).body(Map.of("message", "Samo veterinar može unositi medicinske zapise."));
        }

        // 1) Validacija polja
        if (body == null || body.getLjubimacId() == null) {
            return ResponseEntity.badRequest().body(Map.of("message", "Nedostaje ljubimacId."));
        }
        if (body.getDijagnoza() == null || body.getDijagnoza().isBlank()) {
            return ResponseEntity.badRequest().body(Map.of("message", "Dijagnoza je obavezna."));
        }

        // 2) Ljubimac mora postojati
        Ljubimac ljubimac = ljubimacRepo.findById(body.getLjubimacId())
                .orElse(null);
        if (ljubimac == null) {
            return ResponseEntity.status(404).body(Map.of("message", "Ljubimac ne postoji."));
        }

        // 3) Kreiraj zapis
        MedicinskiZapis zapis = new MedicinskiZapis();
        zapis.setLjubimac(ljubimac);
        zapis.setVeterinar(veterinar);
        zapis.setDijagnoza(body.getDijagnoza());
        zapis.setTerapija(body.getTerapija());

        var sacuvan = repo.save(zapis);
        return ResponseEntity.status(201).body(toDTO(sacuvan));
    }
}

package com.veterinarska.stanica.controller;

import com.veterinarska.stanica.dto.MedicinskiZapisDTO;
import com.veterinarska.stanica.mapper.AppMapper;
import com.veterinarska.stanica.model.*;
import com.veterinarska.stanica.repository.*;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.core.io.FileSystemResource;
import org.springframework.core.io.Resource;
import org.springframework.http.*;
import org.springframework.security.core.Authentication;
import org.springframework.web.bind.annotation.*;

import java.io.IOException;
import java.nio.charset.StandardCharsets;
import java.nio.file.*;
import java.time.format.DateTimeFormatter;
import java.util.*;
import java.util.stream.Collectors;

import static com.veterinarska.stanica.mapper.AppMapper.toDTO;

@RestController
@RequestMapping("/api/medicinski-zapisi")
public class MedicinskiZapisController {

    private final MedicinskiZapisRepository zapisRepo;
    private final LjubimacRepository ljubimacRepo;
    private final KorisnikRepository korisnikRepo;
    private final PregledRepository pregledRepo;

    // Gde snimamo fajlove (možeš promeniti u application.properties: reports.dir=/putanja)
    private final Path baseDir;

    public MedicinskiZapisController(MedicinskiZapisRepository zapisRepo,
                                     LjubimacRepository ljubimacRepo,
                                     KorisnikRepository korisnikRepo,
                                     PregledRepository pregledRepo,
                                     @Value("${reports.dir:uploads/izvestaji}") String reportsDir) {
        this.zapisRepo = zapisRepo;
        this.ljubimacRepo = ljubimacRepo;
        this.korisnikRepo = korisnikRepo;
        this.pregledRepo = pregledRepo;
        this.baseDir = Paths.get(reportsDir);
        try { Files.createDirectories(baseDir); } catch (IOException ignored) {}
    }

    // ---------------- DTO-i za pomoć ----------------
    public static class EligibleItem {
        private Long pregledId;
        private String ljubimacIme;
        private String vlasnik;
        public EligibleItem() {}
        public EligibleItem(Long pregledId, String ljubimacIme, String vlasnik) {
            this.pregledId = pregledId; this.ljubimacIme = ljubimacIme; this.vlasnik = vlasnik;
        }
        public Long getPregledId() { return pregledId; }
        public String getLjubimacIme() { return ljubimacIme; }
        public String getVlasnik() { return vlasnik; }
        public void setPregledId(Long pregledId) { this.pregledId = pregledId; }
        public void setLjubimacIme(String ljubimacIme) { this.ljubimacIme = ljubimacIme; }
        public void setVlasnik(String vlasnik) { this.vlasnik = vlasnik; }
    }

    public static class CreateRequest {
        private Long pregledId;
        private String ljubimacIme;
        private String dijagnoza;
        private String terapija;
        public Long getPregledId() { return pregledId; }
        public void setPregledId(Long pregledId) { this.pregledId = pregledId; }
        public String getLjubimacIme() { return ljubimacIme; }
        public void setLjubimacIme(String ljubimacIme) { this.ljubimacIme = ljubimacIme; }
        public String getDijagnoza() { return dijagnoza; }
        public void setDijagnoza(String dijagnoza) { this.dijagnoza = dijagnoza; }
        public String getTerapija() { return terapija; }
        public void setTerapija(String terapija) { this.terapija = terapija; }
    }

    // ---------------- Osnovni GET-ovi ----------------
    @GetMapping
    public ResponseEntity<List<MedicinskiZapisDTO>> svi() {
        List<MedicinskiZapisDTO> out = zapisRepo.findAll()
                .stream().map(AppMapper::toDTO).collect(Collectors.toList());
        return ResponseEntity.ok(out);
    }

    // VETERINAR: ljubimci sa OBAVLJEN pregledom za koje može da unese zapis
    @GetMapping("/moji-ljubimci-za-izvestaj")
    public ResponseEntity<?> mojiLjubimciZaIzvestaj(Authentication auth) {
        Korisnik vet = ulogovan(auth);
        if (vet == null) return ResponseEntity.status(401).body(singleMsg("Niste prijavljeni."));
        if (vet.getUloga() != Uloga.VETERINAR)
            return ResponseEntity.status(403).body(singleMsg("Samo veterinar može unositi medicinske zapise."));

        List<Pregled> pregledi = pregledRepo.findAllByVeterinar_Email(vet.getEmail());
        List<EligibleItem> out = new ArrayList<>();
        for (Pregled p : pregledi) {
            if (jeZavrsen(p)) {
                Ljubimac lj = p.getLjubimac();
                String vlasnik = (lj != null && lj.getVlasnik() != null)
                        ? (safe(lj.getVlasnik().getIme()) + " " + safe(lj.getVlasnik().getPrezime())).trim()
                        : "";
                out.add(new EligibleItem(p.getId(), lj != null ? lj.getIme() : "", vlasnik));
            }
        }
        out.sort((a, b) -> Long.compare(b.getPregledId(), a.getPregledId()));
        return ResponseEntity.ok(out);
    }

    // VLASNIK: svoje OBAVLJEN preglede (za prikaz moguće liste)
    @GetMapping("/moji-izvestaji")
    public ResponseEntity<?> mojiIzvestaji(Authentication auth) {
        Korisnik vlasnik = ulogovan(auth);
        if (vlasnik == null) return ResponseEntity.status(401).body(singleMsg("Niste prijavljeni."));
        if (vlasnik.getUloga() != Uloga.VLASNIK)
            return ResponseEntity.status(403).body(singleMsg("Samo vlasnik može videti svoje izveštaje."));

        List<Pregled> pregledi = pregledRepo.findAllByLjubimac_Vlasnik_Email(vlasnik.getEmail());
        List<EligibleItem> out = new ArrayList<>();
        for (Pregled p : pregledi) {
            if (jeZavrsen(p)) {
                Ljubimac lj = p.getLjubimac();
                out.add(new EligibleItem(
                        p.getId(),
                        lj != null ? lj.getIme() : "",
                        vlasnik.getIme() + " " + vlasnik.getPrezime()
                ));
            }
        }
        out.sort((a, b) -> Long.compare(b.getPregledId(), a.getPregledId()));
        return ResponseEntity.ok(out);
    }

    // ---------------- Kreiranje zapisa + snimanje fajla ----------------
    @PostMapping
    public ResponseEntity<?> dodaj(@RequestBody CreateRequest body, Authentication auth) {
        Korisnik vet = ulogovan(auth);
        if (vet == null) return ResponseEntity.status(401).body(singleMsg("Niste prijavljeni."));
        if (vet.getUloga() != Uloga.VETERINAR)
            return ResponseEntity.status(403).body(singleMsg("Samo veterinar može unositi medicinske zapise."));
        if (body == null || empty(body.getDijagnoza()))
            return ResponseEntity.badRequest().body(singleMsg("Dijagnoza je obavezna."));

        List<Pregled> preglediVeta = pregledRepo.findAllByVeterinar_Email(vet.getEmail());
        preglediVeta.sort((a, b) -> Long.compare(b.getId(), a.getId()));

        Pregled odabrani = null;
        if (body.getPregledId() != null) {
            for (Pregled p : preglediVeta) {
                if (Objects.equals(p.getId(), body.getPregledId())) { odabrani = p; break; }
            }
            if (odabrani == null)
                return ResponseEntity.status(404).body(singleMsg("Pregled ne postoji kod prijavljenog veterinara."));
            if (!jeZavrsen(odabrani))
                return ResponseEntity.status(400).body(singleMsg("Izveštaj se može uneti samo za OBAVLJEN pregled."));
        } else if (!empty(body.getLjubimacIme())) {
            for (Pregled p : preglediVeta) {
                Ljubimac lj = p.getLjubimac();
                if (jeZavrsen(p) && lj != null && body.getLjubimacIme().equalsIgnoreCase(lj.getIme())) {
                    odabrani = p; break;
                }
            }
            if (odabrani == null)
                return ResponseEntity.status(404).body(singleMsg("Nije pronađen OBAVLJEN pregled za tog ljubimca kod prijavljenog veterinara."));
        } else {
            return ResponseEntity.badRequest().body(singleMsg("Odaberite pregled ili ljubimca iz liste."));
        }

        Ljubimac ljubimac = odabrani.getLjubimac();
        MedicinskiZapis zapis = new MedicinskiZapis();
        zapis.setLjubimac(ljubimac);
        zapis.setVeterinar(vet);
        zapis.setDijagnoza(body.getDijagnoza().trim());
        zapis.setTerapija(empty(body.getTerapija()) ? null : body.getTerapija().trim());

        MedicinskiZapis sacuvan = zapisRepo.save(zapis);

        // Snimi i .txt fajl izveštaja radi web preuzimanja
        try {
            Path path = buildFilePath(sacuvan);
            Files.createDirectories(path.getParent());
            Files.writeString(path, buildTxtReport(sacuvan), StandardCharsets.UTF_8,
                    StandardOpenOption.CREATE, StandardOpenOption.TRUNCATE_EXISTING);
        } catch (Exception e) {
            // Ne rušimo zahtev – samo info da fajl nije snimljen
        }

        // odgovor sa DTO + linkom
        Map<String, Object> resp = new LinkedHashMap<>();
        resp.put("zapis", toDTO(sacuvan));
        resp.put("downloadUrl", "/api/medicinski-zapisi/file/" + sacuvan.getId());
        return ResponseEntity.status(201).body(resp);
    }

    // ---------------- Veterinar: lista svojih zapisa + URL za preuzimanje ----------------
    @GetMapping("/za-veterinara")
    public ResponseEntity<?> mojiZapisiVeterinar(Authentication auth) {
        Korisnik vet = ulogovan(auth);
        if (vet == null) return ResponseEntity.status(401).body(singleMsg("Niste prijavljeni."));
        if (vet.getUloga() != Uloga.VETERINAR)
            return ResponseEntity.status(403).body(singleMsg("Samo veterinar može videti ove izveštaje."));

        List<MedicinskiZapis> list = zapisRepo.findAll().stream()
                .filter(z -> z.getVeterinar() != null && Objects.equals(z.getVeterinar().getId(), vet.getId()))
                .sorted((a,b) -> Long.compare(b.getId(), a.getId()))
                .toList();

        List<Map<String,Object>> out = new ArrayList<>();
        for (MedicinskiZapis m : list) {
            MedicinskiZapisDTO d = toDTO(m);
            Map<String,Object> row = new LinkedHashMap<>();
            row.put("id", d.getId());
            row.put("ljubimacId", d.getLjubimacId());
            row.put("ljubimacIme", d.getLjubimacIme());
            row.put("veterinarId", d.getVeterinarId());
            row.put("veterinarIme", d.getVeterinarIme());
            row.put("dijagnoza", d.getDijagnoza());
            row.put("terapija", d.getTerapija());
            row.put("datum", d.getDatum());
            row.put("downloadUrl", "/api/medicinski-zapisi/file/" + d.getId());
            out.add(row);
        }
        return ResponseEntity.ok(out);
    }

    // ---------------- Preuzimanje fajla (TXT) ----------------
    // GET /api/medicinski-zapisi/file/{id}
    @GetMapping("/file/{id}")
    public ResponseEntity<Resource> download(@PathVariable Long id, Authentication auth) {
        Optional<MedicinskiZapis> opt = zapisRepo.findById(id);
        if (opt.isEmpty()) return ResponseEntity.notFound().build();

        MedicinskiZapis m = opt.get();

        // Dozvola: veterinar koji je uneo ili ADMIN; (ako želiš, dodaćemo i vlasnika ljubimca)
        Korisnik k = ulogovan(auth);
        if (k == null) return ResponseEntity.status(401).build();
        boolean allowed = (k.getUloga() == Uloga.ADMIN)
                || (m.getVeterinar()!=null && Objects.equals(m.getVeterinar().getId(), k.getId()));
        if (!allowed) return ResponseEntity.status(403).build();

        Path p = buildFilePath(m);
        if (!Files.exists(p)) {
            // ako nekad fali fajl, regeneriši brzo
            try {
                Files.createDirectories(p.getParent());
                Files.writeString(p, buildTxtReport(m), StandardCharsets.UTF_8,
                        StandardOpenOption.CREATE, StandardOpenOption.TRUNCATE_EXISTING);
            } catch (IOException ignored) {}
        }
        if (!Files.exists(p)) return ResponseEntity.notFound().build();

        FileSystemResource res = new FileSystemResource(p.toFile());
        String fn = p.getFileName().toString();

        return ResponseEntity.ok()
                .header(HttpHeaders.CONTENT_DISPOSITION, "attachment; filename=\"" + fn + "\"")
                .contentType(MediaType.TEXT_PLAIN)
                .body(res);
    }

    // ---------------- Pomoćne metode ----------------
    private Korisnik ulogovan(Authentication auth) {
        if (auth == null || auth.getName() == null) return null;
        return korisnikRepo.findByEmail(auth.getName()).orElse(null);
    }
    private static boolean empty(String s){ return s == null || s.trim().isEmpty(); }
    private static String safe(String s){ return s == null ? "" : s; }
    private static boolean jeZavrsen(Pregled p){
        if (p == null || p.getStatus() == null) return false;
        String s = p.getStatus().toString().toUpperCase(Locale.ROOT);
        return s.equals("OBAVLJEN") || s.equals("ZAVRSEN") || s.equals("ZAVRŠEN");
    }
    private static Map<String,String> singleMsg(String msg) {
        Map<String,String> m = new HashMap<>();
        m.put("message", msg);
        return m;
    }

    private Path buildFilePath(MedicinskiZapis m){
        String pet = m.getLjubimac()!=null ? m.getLjubimac().getIme() : "ljubimac";
        String date = m.getDatum()!=null ? m.getDatum().format(DateTimeFormatter.ISO_DATE) : "datum";
        String safePet = pet.replaceAll("[^\\p{IsAlphabetic}\\p{IsDigit}_-]+","_");
        String fname = String.format("zapis_%d_%s_%s.txt", m.getId(), safePet, date);
        return baseDir.resolve(fname);
    }

    private String buildTxtReport(MedicinskiZapis m){
        StringBuilder sb = new StringBuilder();
        sb.append("===== Medicinski izveštaj =====\n");
        sb.append("ID zapisa: ").append(m.getId()).append("\n");
        sb.append("Datum: ").append(m.getDatum()).append("\n\n");

        Ljubimac lj = m.getLjubimac();
        if (lj != null){
            sb.append("Ljubimac: ").append(safe(lj.getIme())).append("\n");
            sb.append("Vrsta/Rasa: ").append(safe(lj.getVrsta()))
                    .append(lj.getRasa()!=null?(" / "+lj.getRasa()):"").append("\n");
            if (lj.getVlasnik()!=null){
                sb.append("Vlasnik: ").append(safe(lj.getVlasnik().getIme()))
                        .append(" ").append(safe(lj.getVlasnik().getPrezime()))
                        .append(" (").append(safe(lj.getVlasnik().getEmail())).append(")\n");
            }
        }
        if (m.getVeterinar()!=null){
            sb.append("Veterinar: ").append(safe(m.getVeterinar().getIme()))
                    .append(" ").append(safe(m.getVeterinar().getPrezime()))
                    .append(" (").append(safe(m.getVeterinar().getEmail())).append(")\n");
        }
        sb.append("\n--- Dijagnoza ---\n").append(safe(m.getDijagnoza())).append("\n");
        sb.append("\n--- Terapija ---\n").append(safe(m.getTerapija())).append("\n");
        sb.append("===============================\n");
        return sb.toString();
    }
}
